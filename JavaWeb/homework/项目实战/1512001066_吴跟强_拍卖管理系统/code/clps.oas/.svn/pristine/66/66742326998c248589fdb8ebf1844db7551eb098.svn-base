package com.clps.oas.sm.controller;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.clps.oas.sm.pojo.Account;
import com.clps.oas.sm.service.IAccountService;
import com.clps.oas.sm.vo.AccountVo;

@Controller
@RequestMapping(value = "/sm")
public class AccountController {
	
	@Autowired
	@Qualifier("accountService")
	private IAccountService ias;

	@RequestMapping(value = "/accountList")
	public String showAccountList(Model model) {
		List<AccountVo> accounts = ias.queryAllAccounts();
		model.addAttribute("accounts", accounts);
		return "sm/account_list";
	}

	@RequestMapping("/account_updateView")
	public String updateView(HttpServletRequest request, Model model) {

		Integer accountId = Integer.parseInt(request.getParameter("accountId"));
		AccountVo accountVo = new AccountVo();
		accountVo = ias.queryAccountById(accountId);
		model.addAttribute("account", accountVo);
		return "sm/account_update";
	}

	@RequestMapping(value = "/updateAccount")
	public String updateAccount(HttpServletRequest request) {

		Integer accountId = Integer.parseInt(request.getParameter("accountId"));
		String accountPass = request.getParameter("accountPwd");
		String accountMail = request.getParameter("accountMail");
		String accountProvince = request.getParameter("accountProvince");
		String accountCity = request.getParameter("accountCity");
		String accountDistrict = request.getParameter("accountDistrict");
		String accountAddress = request.getParameter("accountAddress");
		String accountPhone = request.getParameter("accountPhone");
		String accountTelephone = request.getParameter("accountTelephone");
		Integer accountRoleId = Integer.parseInt(request.getParameter("accountRoleId"));
		Integer accountPositionId = Integer.parseInt(request.getParameter("accountPositionId"));
		Integer accountDepartmentId = Integer.parseInt(request.getParameter("accountDepartmentId"));
		Integer accountCompanyId = Integer.parseInt(request.getParameter("accountCompanyId"));

		Account account = new Account();
		account.setAccountId(accountId);
		account.setAccountPass(accountPass);
		account.setAccountMail(accountMail);
		account.setAccountProvince(accountProvince);
		account.setAccountCity(accountCity);
		account.setAccountDistrict(accountDistrict);
		account.setAccountAddress(accountAddress);
		account.setAccountPhone(accountPhone);
		account.setAccountTelephone(accountTelephone);
		account.setAccountRoleId(accountRoleId);
		account.setAccountPositionId(accountPositionId);
		account.setAccountDepartmentId(accountDepartmentId);
		account.setAccountCompanyId(accountCompanyId);
		account.setAccountUpdatedDatetime(new Timestamp(new Date().getTime()));
		account.setAccountIsvalid(true);

		if (ias.updateAccountInfo(account) == 1) {
			return "sm/account_succeed";
		} else {
			return "sm/account_fail";
		}

	}

	@RequestMapping("/account_addView")
	public String addView() {
		return "sm/account_add";
	}

	@RequestMapping(value = "/addAccount")
	public String addAccount(HttpServletRequest request) {

		String accountName = request.getParameter("accountName");
		String accountPass = request.getParameter("accountPwd");
		String accountRealName = request.getParameter("accountRealName");
		String accountMail = request.getParameter("accountMail");
		String accountProvince = request.getParameter("accountProvince");
		String accountCity = request.getParameter("accountCity");
		String accountDistrict = request.getParameter("accountDistrict");
		String accountAddress = request.getParameter("accountAddress");
		String accountPhone = request.getParameter("accountPhone");
		String accountTelephone = request.getParameter("accountTelephone");
		Integer accountRoleId = Integer.parseInt(request.getParameter("accountRoleId"));
		Integer accountPositionId = Integer.parseInt(request.getParameter("accountPositionId"));
		Integer accountDepartmentId = Integer.parseInt(request.getParameter("accountDepartmentId"));
		Integer accountCompanyId = Integer.parseInt(request.getParameter("accountCompanyId"));

		Account account = new Account();
		account.setAccountName(accountName);
		account.setAccountRealName(accountRealName);
		account.setAccountPass(accountPass);
		account.setAccountMail(accountMail);
		account.setAccountProvince(accountProvince);
		account.setAccountCity(accountCity);
		account.setAccountDistrict(accountDistrict);
		account.setAccountAddress(accountAddress);
		account.setAccountPhone(accountPhone);
		account.setAccountTelephone(accountTelephone);
		account.setAccountRoleId(accountRoleId);
		account.setAccountPositionId(accountPositionId);
		account.setAccountDepartmentId(accountDepartmentId);
		account.setAccountCompanyId(accountCompanyId);
		account.setAccountCreatedDatetime(new Timestamp(new Date().getTime()));
		account.setAccountUpdatedDatetime(new Timestamp(new Date().getTime()));
		account.setAccountIsvalid(true);

		if (ias.insertAccountInfo(account) == 1) {
			return "sm/account_succeed";
		} else {
			return "sm/account_fail";
		}

	}

	@RequestMapping(value = "/logicDelAccount")
	public String logicDelAccount(int accountId) {

		if (ias.logicDeleteAccountById(accountId) == 1) {
			return "sm/account_succeed";
		} else {
			return "sm/account_fail";
		}

	}

}
